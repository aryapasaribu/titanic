# -*- coding: utf-8 -*-
"""TitanicDisaster.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RzzMJZnoCg7ORUPsMIho0Sf9FtEaV_hm
"""

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

from google.colab import files

# 1 Import library yang diperlukan

import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsClassifier
from sklearn import tree,svm
from sklearn.metrics import accuracy_score

# 2 Loading Dataset

train_data = pd.read_csv('/content/train.csv')

# Printing first 10 rows of the dataset
train_data.head()

print('The shape of our training set: %s passengers and %s features'%(train_data.shape[0],train_data.shape[1]))

train_data.info()

# cek null value

train_data.isnull().sum()

# membuat heatmap

heatmap = sns.heatmap(train_data[["Survived", "SibSp", "Parch", "Age", "Fare"]].corr(), annot = True)
sns.set(rc={'figure.figsize':(12,10)})

# 3 Exploratory Data Analysis
# SibSp
# mencari data unik
train_data['SibSp'].unique()

bargraph_sibsp = sns.catplot(x = "SibSp", y = "Survived", data = train_data, kind="bar", height = 8)

# B Age

ageplot = sns.FacetGrid(train_data, col="Survived", height = 7)
ageplot = ageplot.map(sns.distplot, "Age")
ageplot = ageplot.set_ylabels("Survival Probability")

# C Sex

sexplot = sns.barplot(x="Sex", y="Survived", data=train_data)

# D Passenger Class (Pclass)

pclassplot = sns.catplot(x = "Pclass", y="Survived", data = train_data, kind="bar", height = 6)

# E Pclass vs Sex

a = sns.catplot(x = "Pclass", y="Survived", hue="Sex", data=train_data, height = 7, kind="bar")

# F Embarked

train_data["Embarked"].isnull().sum()

train_data["Embarked"].value_counts()

# Filling 2 missing values with most frequent value
train_data["Embarked"] = train_data["Embarked"].fillna('S')

sns.catplot(x="Embarked", y="Survived", data=train_data, height = 5, kind="bar")

# G Pclass vs Embarked

sns.catplot(x="Pclass", col="Embarked", data = train_data, kind="count", height=7)

# 4 Data Preprocessing dan Cleaning

train_data.isnull().sum()

# A Menangani nilai null

mean = train_data["Age"].mean()
std = train_data["Age"].std()
print(mean)
print(std)

rand_age = np.random.randint(mean-std, mean+std, size = 177)
age_slice = train_data["Age"].copy()

age_slice[np.isnan(age_slice)] = rand_age
train_data["Age"] = age_slice
train_data.isnull().sum()

# B Membuang kolom yang tidak perlu

col_to_drop = ["PassengerId", "Ticket", "Cabin", "Name"]
train_data.drop(col_to_drop, axis=1, inplace=True)
train_data.head()

# C Mengubah variabel kategorikal ke Numerik

genders = {"male":0, "female":1}
train_data["Sex"] = train_data["Sex"].map(genders)

ports = {"S":0, "C":1, "Q":2}
train_data["Embarked"] = train_data["Embarked"].map(ports)

train_data.head()

# 5 Membuat model ML

df_train_x = train_data[['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked']]

# Target variable column
df_train_y = train_data[['Survived']]

x_train, x_test, y_train, y_test = train_test_split(df_train_x, df_train_y, test_size=0.20, random_state=42)

# A Random Forest Classifier

clf1 = RandomForestClassifier()
clf1.fit(x_train, y_train)
rfc_y_pred = clf1.predict(x_test)
rfc_accuracy = accuracy_score(y_test,rfc_y_pred) * 100
print("accuracy=",rfc_accuracy)

# B Logistic Regression

clf2 = LogisticRegression()
clf2.fit(x_train, y_train)
lr_y_pred = clf2.predict(x_test)
lr_accuracy = accuracy_score(y_test,lr_y_pred)*100

print("accuracy=",lr_accuracy)

# C K-Neighbor Classifier

clf3 = KNeighborsClassifier(5)
clf3.fit(x_train, y_train)
knc_y_pred = clf3.predict(x_test)
knc_accuracy = accuracy_score(y_test,knc_y_pred)*100

print("accuracy=",knc_accuracy)

# D Decision Tree Classifier

clf4 = tree.DecisionTreeClassifier()
clf4 = clf4.fit(x_train, y_train)
dtc_y_pred = clf4.predict(x_test)
dtc_accuracy = accuracy_score(y_test,dtc_y_pred)*100

print("accuracy=",dtc_accuracy)

# E SVM

clf5 = svm.SVC()
clf5.fit(x_train, y_train)
svm_y_pred = clf5.predict(x_test)
svm_accuracy = accuracy_score(y_test,svm_y_pred)*100
print("accuracy=",svm_accuracy)

print("Accuracy of Random Forest Classifier =",rfc_accuracy)
print("Accuracy of Logistic Regressor =",lr_accuracy)
print("Accuracy of K-Neighbor Classifier =",knc_accuracy)
print("Accuracy of Decision Tree Classifier = ",dtc_accuracy)
print("Accuracy of Support Vector Machine Classifier = ",svm_accuracy)

# MAKING PREDICTION FOR TEST

# import test.csv
test_data = pd.read_csv('/content/test.csv')
test_data.head()

test_data.info()

test_data.isnull().sum()

# mengganti null value pada kolom Age
mean = test_data["Age"].mean()
std = test_data["Age"].std()
rand_age = np.random.randint(mean-std, mean+std, size = 86)
age_slice = test_data["Age"].copy()
age_slice[np.isnan(age_slice)] = rand_age
test_data["Age"] = age_slice

# mengganti data hilang dari kolom Fare
test_data['Fare'].fillna(test_data['Fare'].mean(), inplace=True)

test_data.isnull().sum()

col_to_drop = ["PassengerId", "Ticket", "Cabin", "Name"]
test_data.drop(col_to_drop, axis=1, inplace=True)
test_data.head(10)

genders = {"male":0, "female":1}
test_data["Sex"] = test_data["Sex"].map(genders)

ports = {"S":0, "C":1, "Q":2}
test_data["Embarked"] = test_data["Embarked"].map(ports)

test_data.head()

# Submisi Final

x_test = test_data
y_pred = clf1.predict(x_test)
originaltest_data = pd.read_csv('/content/test.csv')
submission = pd.DataFrame({
    "PassengerId" : originaltest_data["PassengerId"],
    "Survived" : y_pred
})
submission.head(20)